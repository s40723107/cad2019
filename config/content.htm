<h1>About</h1>
<p>此內容管理系統以 <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 作為 submodule 運作, 可以選定對應的版本運作, cmsimde 可以持續改版, 不會影響之前設為 submodule, 使用舊版 cmsimde 模組的內容管理相關運作.</p>
<h4>利用 cmsimde 建立靜態網誌方法:</h4>
<p>1. 在 github 建立倉儲, git clone 到近端</p>
<p>2. 參考 <a href="https://github.com/mdecourse/newcms">https://github.com/mdecourse/newcms</a>, 加入除了 cmsimde 目錄外的所有內容</p>
<p>以 git submodule add <a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> cmsimde</p>
<p>建立 cmsimde 目錄, 並從 github 取下子模組內容.</p>
<p>3.在近端維護時, 更換目錄到倉儲中的 cmsimde, 以 python wsgi.py 啟動近端網際伺服器.</p>
<p>動態內容編輯完成後, 以 generate_pages 轉為靜態內容, 以 git add commit 及 push 將內容推到遠端.</p>
<p>4. 之後若要以 git clone 取下包含 submodule 的所有內容, 執行:</p>
<p>git clone --recurse-submodules <a href="https://github.com/mdecourse/newcms.git">https://github.com/mdecourse/newcms.git</a></p>
<h1>Develop</h1>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 的開發, 可以在一個目錄中放入 cmsimde, 然後將 up_dir 中的內容放到與 cmsimde 目錄同位階的地方, 使用 command 進入 cmsimde 目錄, 執行 python wsgi.py, 就可以啟動, 以瀏覽器 https://localhost:9443 就可以連接, 以 admin 作為管理者密碼, 就可以登入維護內容.</p>
<p>cmsimde 的開發採用 Leo Editor, 開啟 cmsimde 目錄中的 cmsimde.leo 就可以進行程式修改, 結束後, 若要保留網際內容, 只要將 cmsimde 外部的內容倒回 up_dir 目錄中即可後續對 cmsimde 遠端倉儲進行改版.</p>
<p>init.py 位於  up_dir 目錄, 可以設定 site_title 與 uwsgi 等變數.</p>
<h1>每週練習內容</h1>
<h2>week2</h2>
<h3>CMSIMDE</h3>
<p><a href="https://github.com/mdecourse/cmsimde">https://github.com/mdecourse/cmsimde</a> 是一套以 Python 加上 flask, bs4, lxml, mardown, pelican, flask_cors, leo 等模組所建構的網際內容管理系統.</p>
<p>flask 模組是一套網際程式框架, CMSiMDE 利用此一框架編寫網際相關的函式, 用來執行動態的內容管理系統.</p>
<p>bs4 在 CMSiMDE 擔任解析 config/content.htm 超文件檔案的工作, 根據 h1, h2 與 h3 標註, 對 content.htm 進行分頁, 因此使用者可以透過 3 個階次的內容架構進行編輯.</p>
<p>lxml 模組主要用來將 content.htm 逐一轉換為 content 目錄中的個別檔案, 也就是在 CMSiMDE 動態系統中, 點擊 generate_pages 之後, 呼叫 lxml 模組中的分頁方法, 將動態內容轉為靜態內容.</p>
<p>markdown 與 pelican 在 CMSiMDE 主要用來產生靜態網誌, 而網誌的設計與編輯則透過 Leo Editor 進行, 此外 CMSiMDE 除了網際內容管理與網誌之外, 還透過 Leo Editor 管理 reveal.js 網際簡報系統.</p>
<p>flask_cors 模組, 在 CMSiMDE 是為了配合 Dartpad 程式編寫過程, 需要跨網站擷取資料的需求而加入, 在舊版的可攜系統中若無此模組, 執行 CMSiMDE 之前必須透過</p>
<p>python -m pip install flask_cors </p>
<p>安裝.</p>
<p>CMSiMDE 可以放入 Javascript 前端程式, 進行簡單的設計運算, 例如:</p>
<p><a href="http://mde.tw/cp2019/content/Task3.html">http://mde.tw/cp2019/content/Task3.html</a> 中的猜數字遊戲.</p>
<p>也可以嵌入 STL文字格式零件, 例如:</p>
<p><a href="http://mde.tw/cad2019/content/STL.html">http://mde.tw/cad2019/content/STL.html</a></p>
<p>也可以利用前端的 Javascript 與伺服器後端的程式進行非同步設計運算或遠端控制, 例如:</p>
<p><a href="http://mde.tw/cad2019/content/Task1.html">http://mde.tw/cad2019/content/Task1.html</a> 中的網際虛擬雙輪車控制.</p>
<h2>week3</h2>
<h3>編譯步驟</h3>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">先將Y：\ portablegit \ bin \ sh.exe改名為sh_rename_for_solvespace.exe</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">git版本查驗git版本</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">git 2.13版本以上，可以使用以下git clone  </span></span><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">--recurse-submodules獲取所有子模組資料</span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">git clone --recurse-submodules https://github.com/solvespace/solvespace.git解決空間</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">編輯Y：\ tmp \ solvespace \ extlib \ angle \ CMakeLists.txt註釋掉第713和714行</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">#list（APPEND ANGLE_DEFINITIONS </span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">＃“-DANGLE_PRELOADED_D3DCOMPILER_MODULE_NAMES = {\” d3dcompiler_47.dll \“，\” d3dcompiler_46.dll \“，\” d3dcompiler_43.dll \“}”）</span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">endif（）</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">需要手動進行libpng.dll.a的編譯，並改名為libpng_static.a，並放到編譯系統的lib目錄中：</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cd解空間</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">光盤擴展庫</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">光盤庫</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">mkdir構建</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">光盤製作</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cmake .. -G“ MinGW Makefiles” -DCMAKE_BUILD_TYPE =發布</span></span><br/><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">mingw32-make</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">將libpng.dll.a重命名為libpng_static.a並複製到Y：\ msys64 \ mingw64 \ lib</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">接著回到solvespace原始代碼目錄，建立構建目錄後進入建立目錄，執行：</span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cmake .. -G“ MinGW Makefiles” -DCMAKE_BUILD_TYPE =發布</span></span></span><br/><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">mingw32-make</span></span></span></p>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/DY4sFTSi0go" width="560"></iframe></span></span></span></p>
<h2>week5</h2>
<h3>Solvespace 操作</h3>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/4kCtnkvPaog" width="560"></iframe></p>
<h2>week6</h2>
<h3>V-rep模型控制汽車移動</h3>
<p><span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/CPKsFK8UzsM" width="560"></iframe></span></span></span></p>
<p><span> </span></p>
<h2>week7</h2>
<h3>Solvespace 繪圖驗證</h3>
<p><span>從</span><a href="http://mde.tw/cad2019/content/CAD2CAE.html">零件網頁</a>自選要畫的圖<span> 可採 Solvespace 完成繪圖的零件</span></p>
<p><span><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/bJAsd3-_YC4" width="560"></iframe></span></p>
<h2>week8</h2>
<p><span>Leo 設定網址路徑和名稱</span></p>
<p><span>1.</span></p>
<p><span>打開D槽中自己倉儲的config裡pelican.leo的檔案(在Leo 裡開啟)，另外再打開Y槽tmp裡的cp2019/config/pelican.leo裡</span></p>
<p><span>在Leo裡將cp2019的編輯tamplate/@path theme/...底下@edit base的程式全部複製並貼上在相同位置的自己的倉儲pelican.leo裡，之後做儲存</span><span> </span></p>
<p><span>2.</span></p>
<p><span>Leo中共用裡@edit  pelicanconf.py 修改</span></p>
<p><span>AUTHOR</span>=自己學號</p>
<p><span>SITENAME</span>=cad2019學號</p>
<p><span>3.</span></p>
<p><span>Leo中遠端裡@edit publishconf.py修改</span></p>
<p><span>1.<span>SITEURL</span>=https://倉儲帳號.github.io/cad2019/blog</span></p>
<p><span>2.<span>DISQUS_SITENAME</span>=Disqus名稱</span></p>
<p><span>註:指令ctrl+I=為一個節點，意思是增加一個檔案</span></p>
<h2>week10 . 11</h2>
<p><span>Fork分組倉儲  : <a href="https://github.com/s40723125/cad2019ag5">https://github.com/s40723125/cad2019ag5</a></span></p>
<p><img alt="" height="411" src="/images/FORK2.PNG" width="840"/></p>
<p><img alt="" height="592" src="/images/FORK.PNG" width="410"/></p>
<h2>week12</h2>
<h3>NX12</h3>
<h4><span style="color: #ff0000;">NX 12</span> for Engineering Design</h4>
<h4><a href="http://mde.tw/cad2019/downloads/NX-12-for-Engineering-Design.pdf">http://mde.tw/cad2019/downloads/NX-12-for-Engineering-Design.pdf</a></h4>
<h2>week13</h2>
<p>第13週-Solvespace 與 NX12 參數繪圖與 V-rep 結合應用</p>
<p>重點筆記: 講解NX3與NX12之間特性、差異</p>
<p><span style="color: #ff0000;">NX3</span><br/>使用輸出VRML[選VRML2.0，轉入Webots(副檔名.wrl)]<br/>並勾選選項<br/>1.output lights<br/>2.output matenals<br/>3.recursive multi file<br/><span>註</span>:<br/>1.imput VRML為Webots打開之檔案類型<br/>2.solvespace無法轉成wrl檔<br/>3.wrl檔為文字檔<br/><br/><span style="color: #ff0000;">NX12</span><br/>重要檔案<br/>1.NXASSEMBLY(作用為轉檔)=IGES也是轉檔<br/>2.NXBIN<br/>3.UGII<br/>註:<br/>1.Journal=畫圖中並同時儲存<br/><br/><span style="color: #ff0000;">比較差異</span></p>
<p><span>NX3</span>=較陽春，但簡便，可執行放在UGII檔裡</p>
<p><span>NX12</span>=規格、功能性相對齊全，但為了配合Windows 7之後的升級改版，直接將大部分檔案放在NXBIN裡，不過有些重要檔案仍儲存在UGII裡。</p>
<p><span style="color: #ff0000;">HOW TO 將NX12程式語言改成Python</span></p>
<p>改寫位置之操作順序:<br/>File&gt;Preferences&gt;User interface&gt;Tools</p>
<p>原先Journal language中將Visual Basic選項改為Python選項</p>
<p>目的:<br/>主要方面日後藉由程式去操作NX12</p>
<h2>week14</h2>
<p><span><span style="color: #ff0000;">任務</span>:</span></p>
<p><span><span style="color: #ff0000;">同步啟動跨組自評與互評機制</span>, 並針對課程內容所要求的任務要項逐一查驗各組員學習成效, 希望在鼓勵組員公開倉儲內容與教學影片互相學習之餘, 也能達到公平計分的目的，同時也強制性規定需作筆記。</span></p>
<p><span style="color: #ff0000;">在第十四週也逐步介紹NX、Solvespace、Webots的執行與互動</span></p>
<p><span>Q.如何用SciTe執行Python，與<span>NX、Solvespace、Webots互動</span></span></p>
<p><span><span>A:</span></span><span><span>程式由外部控制虛擬、實體(大略贅述，詳情敘述只紀錄關鍵字)</span></span></p>
<p><span style="color: #ff0000;">片刻紀錄:</span></p>
<p><span><span><span>1</span>.關鍵字:nx run journal=用python執行，但沒跑出原始碼。</span></span></p>
<p><span><span><span>2</span>.需放Download裡(只是demo)=可直接給路徑&lt;path:path&gt;名稱(yrl.學號)，使學號在路徑連結。</span></span></p>
<p><span><span>3.cmsimde@...=為release轉出版本，會改變數字。</span></span></p>
<p><span></span></p>
<h1>期中報告</h1>
<p>期中報告影片 : </p>
<p><iframe allowfullscreen="allowfullscreen" height="314" src="//www.youtube.com/embed/vMxCZa78SVw" width="560"></iframe></p>